@page "{id:int}"
@model AlDentev2.Pages.ProductDetailsModel
@{
    ViewData["Title"] = Model.Product?.Name ?? "Szczegóły produktu";
}
<div class="container mt-5">
    @if (Model.Product == null)
    {
        <div class="alert alert-danger mt-5">
            Produkt nie został znaleziony.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6 mt-5">
                <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        @if (Model.Product.ProductImages != null && Model.Product.ProductImages.Any())
                        {
                            var mainImage = Model.Product.ProductImages.FirstOrDefault(pi => pi.IsMain) ?? Model.Product.ProductImages.OrderBy(pi => pi.DisplayOrder).FirstOrDefault();
                            var additionalImages = Model.Product.ProductImages.Where(pi => pi != mainImage).OrderBy(pi => pi.DisplayOrder);
                            <div class="carousel-item productDetailImg active">
                                <img class="img-fluid" src="@(mainImage?.ImageUrl)" alt="@Model.Product.Name" />
                            </div>
                            @foreach (var image in additionalImages)
                            {
                                <div class="carousel-item productDetailImg">
                                    <img class="img-fluid" src="@image.ImageUrl" alt="@Model.Product.Name" />
                                </div>
                            }
                        }
                        else if (!string.IsNullOrEmpty(Model.Product.ImageUrl))
                        {
                            <div class="carousel-item active productDetailImg">
                                <img class="img-fluid" src="@Model.Product.ImageUrl" alt="@Model.Product.Name" />
                            </div>
                        }
                        else
                        {
                            <div class="carousel-item active productDetailImg">
                                <img class="img-fluid" src="/images/placeholder.jpg" alt="Brak zdjęcia" />
                            </div>
                        }
                       
                    </div>
                    @if (Model.Product.ImageUrl != null && Model.Product.ImageUrl.Count() > 1)
                    {
                        <button class="carousel-control-prev " type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon productDetailIcon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon productDetailIcon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    }
                </div>
            </div>

            <!-- Informacje o produkcie -->
            <div class="col-md-6 mt-5">
                <h4>@Model.Product.Name</h4>
                <p class="text-muted small">Kod produktu: @Model.Product.SKU</p>
                <h5 class="mt-3">@Model.Product.Price PLN</h5>
                <p class="mt-4">@Model.Product.Description</p>
                <form method="post" asp-page-handler="AddToCart" class="mt-4">
                    <input type="hidden" asp-for="ProductId" value="@Model.Product.Id" />

                    <p>Rozmiar:</p>
                    @if (Model.AvailableSizes.Any())
                    {
                        <div class="mb-3">
                      
                            <div>
                                @foreach (var size in Model.AvailableSizes)
                                {
                                    var isAvailable = Model.StockQuantities.TryGetValue(size.Id, out var quantity) && quantity > 0;
                                    <button type="button"
                                            class="btn @(isAvailable ? "btn-outline-dark" : "btn-outline-secondary disabled")"
                                            onclick="selectSize(this, @size.Id)"
                                            data-size-id="@size.Id"
                                            data-available="@isAvailable.ToString().ToLower()"
                                            title="@(isAvailable ? $"Dostępne: {quantity} szt." : "Niedostępne")">
                                        @size.Name
                                    </button>
                                }
                                <input type="hidden" name="SelectedSizeId" id="selectedSize" />
                            </div>
                        </div>
                    }

                    <div class="mb-3">
                        <label for="quantity" class="form-label">Ilość:</label>
                        <input type="number"
                               class="form-control"
                               id="quantity"
                               asp-for="Quantity"
                               min="1"
                               max="10"
                               style="width: 80px;">
                    </div>

                    <button type="submit" class="btn btn-dark">Dodaj do koszyka</button>
                </form>

                <!-- Informacje dodatkowe -->
                <div class="mt-5">
                    <h6>Kategoria:</h6>
                    <p>@Model.Product.Category?.Name</p>
                    <h6 class="mt-3">Dostawa:</h6>
                    <p>Dostawa w ciągu 1-3 dni roboczych.</p>
                </div>
            </div>
        </div>
    }
</div>
@section Scripts{
    <script>
        function selectSize(button, sizeId) {
            // Pobierz wszystkie przyciski rozmiarów w tym samym formularzu
            const form = button.closest('form');
            const sizeButtons = form.querySelectorAll('button[data-size-id]');
            const hiddenInput = form.querySelector('input[name="SelectedSizeId"]');
            const addToCartBtn = form.querySelector('button[type="submit"]');

            // Usuń klasę 'active' ze wszystkich przycisków
            sizeButtons.forEach(btn => {
                btn.classList.remove('btn-dark');
                btn.classList.add('btn-outline-dark');
            });

            // Dodaj klasę 'active' do wybranego przycisku
            const isAvailable = button.getAttribute('data-available') === 'true';
            if (isAvailable) {
                button.classList.remove('btn-outline-dark');
                button.classList.add('btn-dark');

                // Ustaw wartość ukrytego pola
                hiddenInput.value = sizeId;

                // Odblokuj przycisk "Dodaj do koszyka" jeśli jest
                if (addToCartBtn) {
                    addToCartBtn.disabled = false;
                }
            }
        }
    </script>
}
